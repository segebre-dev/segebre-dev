# I decided to more finely document through comments this file as it is not very intuitive and will probably not be touched in a while.

structure:
  children:
    - extension: '*' # we do not care about anything outside of the `src` folder
    - name: 'src'
      children:
        - name: 'components'
        - name: 'utils'
        - name: 'app'
          children:
            - name: 'not-found' # we accept the `not-found.ts` file
              extension: 'ts'
            - name: '_not-found'
              ruleId: noPathAllowed # We want to make sure no `page` or `layout` files exist under the `_not-found` folder
            - ruleId: 'pageAndLayout'
            - ruleId: 'pageAndLayoutFolders'
            - ruleId: 'subPaths'
        - name: 'mdx-components'
        - name: 'types.d'
          extension: 'ts'
rules:
  appFolder: # We use this appFolder for recursion. It is different than the root /app folder due to files like `not-found`
    children:
      - ruleId: 'pageAndLayout'
      - ruleId: 'pageAndLayoutFolders'
      - ruleId: 'subPaths'
  pageAndLayout:
    name: /^(?:page|layout)$/ # we only want to accept the `page` and `layout` files
    extension: '.ts'
  pageAndLayoutFolders:
    name: /^_(?:page|layout)$/ # we want all the `page` and `layout` assets to exist under the respective folders `_page` and `_layout`
    ruleId: noPathAllowed # We want to make sure no `page` or `layout` files exist under the `_page` and `_layout` folders
  subPaths:
    name: /^(?!_)\(?${{kebab-case}}\)?$/ # we support any folder that does not start with an `_` to allow the creation of further paths
    ruleId: 'appFolder' # we recursively apply these rules to all sub-folders
  noPathAllowed:
    children:
      - name: /^(?!layout$|page$)${{kebab-case}}/ # we allow anything that does not create a new path
      - name: /^(?!layout$|page$)${{kebab-case}}/ # we allow anything that does not create a new path
        ruleId: noPathAllowed
